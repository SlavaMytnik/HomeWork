package homework1.task1;

/**
 * Класс Task1Variant1 выполняет Задания 1.2, 1.3, 1.5 Урока 1
 * (побитовые операции)
 *
 * Класс Task1Variant1 представляет собой Вариант 1 решения Заданий
 */
public class Task1Variant1 {
    public static void main(String[] args) {

        // Задание 1.2 (побитовые операции с числами 42 и 15)
        int a = 42;
        int b = 15;

        /* Побитовая операция: 42 & 15
        Левый операнд:  00000000000000000000000000101010
        Действие:       &
        Правый операнд: 00000000000000000000000000001111
        Результат:      00000000000000000000000000001010 */
        System.out.println(a & b);

        /* Побитовая операция: 42 | 15
        Левый операнд:  00000000000000000000000000101010
        Действие:       |
        Правый операнд: 00000000000000000000000000001111
        Результат:      00000000000000000000000000101111 */
        System.out.println(a | b);

        /* Побитовая операция: 42 ^ 15
        Левый операнд:  00000000000000000000000000101010
        Действие:       ^
        Правый операнд: 00000000000000000000000000001111
        Результат:      00000000000000000000000000100101 */
        System.out.println(a ^ b);

        /* Побитовая операция: ~42
        Двоичное число: 00000000000000000000000000101010
        Результат:      11111111111111111111111111010101 */
        System.out.println(~a);

        /* Побитовая операция: 42 << 15
        Двоичное число: 00000000000000000000000000101010
        Результат:      00000000000101010000000000000000 */
        System.out.println(a << b);

        /* Побитовая операция: 42 >> 15
        Двоичное число: 00000000000000000000000000101010
        Результат:      00000000000000000000000000000000 */
        System.out.println(a >> b);

        /* Побитовая операция: 42 >>> 15
        Двоичное число: 00000000000000000000000000101010
        Результат:      00000000000000000000000000000000 */
        System.out.println(a >>> b);
        System.out.println("");

        a = 15;
        b = 42;

        /* Если число 42 является правым операндом в побитовых операциях <<, >>, >>>,
        то оно преобразуется в число 10. Для числа int для правого операнда
        используется только 5 младших битов числа, т.е. для чилса 42 это 01010,
        что является числом 10. */

        /* Побитовая операция: 15 & 42
        Левый операнд:  00000000000000000000000000001111
        Действие:       &
        Правый операнд: 00000000000000000000000000101010
        Результат:      00000000000000000000000000001010 */
        System.out.println(a & b);

        /* Побитовая операция: 15 | 42
        Левый операнд:  00000000000000000000000000001111
        Действие:       |
        Правый операнд: 00000000000000000000000000101010
        Результат:      00000000000000000000000000101111 */
        System.out.println(a | b);

        /* Побитовая операция: 15 ^ 42
        Левый операнд:  00000000000000000000000000001111
        Действие:       ^
        Правый операнд: 00000000000000000000000000101010
        Результат:      00000000000000000000000000100101 */
        System.out.println(a ^ b);

        /* Побитовая операция: ~15
        Двоичное число: 00000000000000000000000000001111
        Результат:      11111111111111111111111111110000 */
        System.out.println(~a);

        /* Побитовая операция: 15 << 42
        Двоичное число: 00000000000000000000000000001111
        Результат:      00000000000000000011110000000000 */
        System.out.println(a << b);

        /* Побитовая операция: 15 >> 42
        Двоичное число: 00000000000000000000000000001111
        Результат:      00000000000000000000000000000000 */
        System.out.println(a >> b);

        /* Побитовая операция: 15 >>> 42
        Двоичное число: 00000000000000000000000000001111
        Результат:      00000000000000000000000000000000 */
        System.out.println(a >>> b);
        System.out.println("");

        // Задание 1.3 (побитовые операции с числами -42 и -15)
        a = -42;
        b = -15;

        /* Если число -15 является правым операндом в побитовых операциях <<, >>, >>>,
        то оно преобразуется в число 17. Для числа int для правого операнда
        используется только 5 младших битов числа, т.е. для чилса -15 это 10001,
        что является числом 17. */

        /* Побитовая операция: -42 & -15
        Левый операнд:  11111111111111111111111111010110
        Действие:       &
        Правый операнд: 11111111111111111111111111110001
        Результат:      11111111111111111111111111010000 */
        System.out.println(a & b);

        /* Побитовая операция: -42 | -15
        Левый операнд:  11111111111111111111111111010110
        Действие:       |
        Правый операнд: 11111111111111111111111111110001
        Результат:      11111111111111111111111111110111 */
        System.out.println(a | b);

        /* Побитовая операция: -42 ^ -15
        Левый операнд:  11111111111111111111111111010110
        Действие:       ^
        Правый операнд: 11111111111111111111111111110001
        Результат:      00000000000000000000000000100111 */
        System.out.println(a ^ b);

        /* Побитовая операция: ~-42
        Двоичное число: 11111111111111111111111111010110
        Результат:      00000000000000000000000000101001 */
        System.out.println(~a);

        /* Побитовая операция: -42 << -15
        Двоичное число: 11111111111111111111111111010110
        Результат:      11111111101011000000000000000000 */
        System.out.println(a << b);

        /* Побитовая операция: -42 >> -15
        Двоичное число: 11111111111111111111111111010110
        Результат:      11111111111111111111111111111111 */
        System.out.println(a >> b);

        /* Побитовая операция: -42 >>> -15
        Двоичное число: 11111111111111111111111111010110
        Результат:      00000000000000000111111111111111 */
        System.out.println(a >>> b);
        System.out.println("");

        a = -15;
        b = -42;

        /* Если число -42 является правым операндом в побитовых операциях <<, >>, >>>,
        то оно преобразуется в число 22. Для числа int для правого операнда
        используется только 5 младших битов числа, т.е. для чилса -42 это 10110,
        что является числом 22. */

        /* Побитовая операция: -15 & -42
        Левый операнд:  11111111111111111111111111110001
        Действие:       &
        Правый операнд: 11111111111111111111111111010110
        Результат:      11111111111111111111111111010000 */
        System.out.println(a & b);

        /* Побитовая операция: -15 | -42
        Левый операнд:  11111111111111111111111111110001
        Действие:       |
        Правый операнд: 11111111111111111111111111010110
        Результат:      11111111111111111111111111110111 */
        System.out.println(a | b);

        /* Побитовая операция: -15 ^ -42
        Левый операнд:  11111111111111111111111111110001
        Действие:       ^
        Правый операнд: 11111111111111111111111111010110
        Результат:      00000000000000000000000000100111 */
        System.out.println(a ^ b);

        /* Побитовая операция: ~-15
        Двоичное число: 11111111111111111111111111110001
        Результат:      00000000000000000000000000001110 */
        System.out.println(~a);

        /* Побитовая операция: -15 << -42
        Двоичное число: 11111111111111111111111111110001
        Результат:      11111100010000000000000000000000 */
        System.out.println(a << b);

        /* Побитовая операция: -15 >> -42
        Двоичное число: 11111111111111111111111111110001
        Результат:      11111111111111111111111111111111 */
        System.out.println(a >> b);

        /* Побитовая операция: -15 >>> -42
        Двоичное число: 11111111111111111111111111110001
        Результат:      00000000000000000000001111111111 */
        System.out.println(a >>> b);

        /* Задание 1.5 (побитовая операция с числом 42.5)
        Попытка осуществления побитовой операции
        (например, System.out.println(~42.5);)
        с вещественным числом приводит к появлению ошибки:
        Operator '~' cannot be applied to 'double' */
    }
}
